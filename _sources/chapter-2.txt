**************************
第二章 实现语法分析器和AST
**************************

`本章原文`__

__ http://llvm.org/docs/tutorial/LangImpl2.html

第二章介绍
==========

欢迎来到“用LLVM开发新语言”教程的第二章。本章将介绍如何使用在第一章中打造的词法分析器来为我们的Kaleidoscope语言构建一个完整的\ `语法解析器`__\ 。准备好语法解析器后，我们便能够定义和构建\ `抽象语法树`__\ （AST，Abstract Syntax Tree）了。

__ http://en.wikipedia.org/wiki/Parsing
__ http://en.wikipedia.org/wiki/Abstract_syntax_tree

我们要打造的语法分析器将混合使用\ `递归下降解析法`__\ 和\ `算符优先级解析法`__\ 来解析Kaleidoscope语言（后者用于解析二元表达式而前者解析其余内容）。在开始解析工作之前，让我们先来讨论一下解析过程的输出：抽象语法树。

__ http://en.wikipedia.org/wiki/Recursive_descent_parser
__ http://en.wikipedia.org/wiki/Operator-precedence_parser

抽象语法树（AST）
=================

程序的抽象语法树的作用在于抓住程序行为的要义，以便编译器后续环节（如代码生成）对其进行解析。基本上，我们希望语言中的每个结构都有一个对象与之对应，AST也应该对语言进行紧密的建模。在Kaleidoscope中，我们有表达式、函数原型和函数对象。我们首先从表达式入手：

.. include:: _includes/chapter-2-code-1.rst

上述代码定义了基类\ ``ExprAST``\ 和一个用于数值常量的子类。需要注意的一点是，\ ``NumberExprAST``\ 将文本所表示的数值存放在了成员变量中。这样编译器的后续环节便可以得知所存的数值。

目前为止我们还只是构建了AST，尚无有用的访问它们的方法。比如，我们可以很容易地增加一个虚方法来对代码作格式化打印。一下我们将在Kaleidoscope中用到的其他表达式AST节点的定义：

.. include:: _includes/chapter-2-code-2.rst

这部分（有意地）设计得非常直截了当：\ ``VariableExprAST``\ 保存变量名，\ ``BinaryExprAST``\ 保存操作符（如“+”），\ ``CallExprAST``\ 保存函数名和作为参数的表达式列表。我们设计的AST的优势之一便是可以在不涉及语法的情况下抓住语言本身的特性。注意这里还没有讨论二元运算符的优先级和词法结构等等。

对我们的基本语言来说，这些就是需要定义的所有表达式节点了。由于目前还不具备条件控制流程，它还不是图灵完备的；我们将在后续环节中予以完善。接下来要做的两件事是找出一种描述函数接口的方法和一种描述函数自身的方法：

.. include:: _includes/chapter-2-code-3.rst

在Kaleidoscope中，函数的类型是由其参数个数决定的。由于所有的值都是双精度浮点数，无须存储参数本身的类型。在更强大和实际的语言中，\ ``ExprAST``\ 类就很可能会有一个类型字段。

有了这些作为脚手架，我们就可以开始讨论Kaleidoscope中表达式和函数体的语法解析了。

语法分析器基础
==============

现在我们要开始构造AST了，我们得定义完成构造工作的解析代码。其基本想法是将诸如“x+y”（在此处应是由词法分析器返回的三个标记）这样的东西借助这样的调用解析成AST：

.. include:: _includes/chapter-2-code-4.rst

为了达到这个目的，我们先定义一些辅助代码：

.. include:: _includes/chapter-2-code-5.rst

这段代码借助词法分析器实现了一个简单的标记缓冲，使得我们可以提前看到词法分析器将要返回的下一个标记。我们的语法解析器中的所有函数都假设\ ``CurTok``\ 是当前正需要解析的标记。

.. include:: _includes/chapter-2-code-6.rst

``Error``\ 函数是我们的解析器用来处理错误的一个简单的辅助函数。我们的解析器的错误恢复策略并不是最好的，对用户也不特别友好，不过对我们的教程而言也已经足够了。这几个函数简化了那些具备不同返回值类型的函数的错误处理：它们只返回\ ``NULL``\ 。

有了这些辅助函数，我们就可以开始实现第一份语法了：数值常量。

解析基本表达式
==============

之所以从数值常量开始，是因为针对它们的处理最简单。对于语法中的每个规则，我们都定义一个解析该规则的函数。对于数值常量，我们有：

.. include:: _includes/chapter-2-code-7.rst

这段代码很简单：它在当前标记为\ ``tok_number``\ 时被调用。它用当前解析出的数值构造一个\ ``NumberExprAST``\ 节点，将词法分析器步进到下一个标记，最后返回。

这儿有几点很有趣。其中最重要的一点就是该函数会取走与该规则相关的所有标记并在返回前将下一个标记（该标记不属于当前的语法规则）放入标记缓冲。这是非常标准的递归下降解析器的行为。作为一个更合适的例子，括号运算符的定义如下：

.. include:: _includes/chapter-2-code-8.rst

该函数展示了我们的解释器的几个有趣的地方：

#. 它展示了我们如何使用\ ``Error``\ 函数。该函数被调用时期望当前标记为“\ ``(``\ ”，但完成子表达式解析之后，后续的标记可能并不是“\ ``)``\ ”。例如，如果用户输入的是“\ ``( 4 x``\ ”而不是“\ ``(4)``\ ”，解析器就应该报错。由于可能发生错误，解析器需要一种用于标识发生了错误的方法：我们的解析器在碰到错误时会返回\ ``NULL``\ 。

#. 另一个有趣的地方在于，这个函数采用递归的方式调用了\ ``ParseExpression``\ （我们将看到\ ``ParseExpression``\ 会调用\ ``ParseParenExpr``\ a）。它的强大之处在于它使得我们得以处理递归的语法，并令规则非常简单明了。注意括号本身并不会引发AST节点的构造。虽然我们可以这样做，但括号最重要的作用还是在于引导解析器并对表达式进行分组。一旦解析器完成了AST的构造，括号就不再必要了。

下一个简单规则是用于处理变量引用和函数调用的：

.. include:: _includes/chapter-2-code-8.rst

这段代码和其它函数的风格一致。（它应该在当前标记为\ ``tok_identifier``\ 时被调用）。它也具备递归和错误处理。比较有意思的时它采用了\ **预取**\ 的方式来确定当前的标识符到底是一个独立的变量引用还是一个函数调用表达式。它通过检查紧跟标识符之后的标记是否是“\ ``(``\ ”来决定应该构造一个\ ``VariableExprAST``\ 还是一个\ ``CallExprAST``\ 节点。

现在，所有的表达式解析逻辑都已经到位，我们可以写一个辅助函数将之包装到一个统一的入口。我们将这类表达式称为\ **主**\ 表达式，原因将在本教程的\ `后续章节`__\ 中详述。为了解析任意的主表达式，我们需要确定表达式的类型：

.. include:: _includes/chapter-2-code-9.rst

__ http://llvm.org/docs/tutorial/LangImpl6.html#unary

现在你已经看到这个函数的定义，我们在各个函数中对\ ``CurTok``\ 值做假设的原因也就更明显了。这里用预取的方式来确定正要解析的表达式的种类，然后再调用相应的函数进行解析。

基本表达式都已经搞定了，得开始着手解决二元表达式了。它们要复杂一些。

解析二元表达式
==============

二元表达式要难解析得多，因为它们往往有二义性。例如，给定字符串“\ ``x+y*z``\ ”，解析器既可以将之解析为“\ ``(x+y)*z``\ ”，也可以将之解析为“\ ``x+(y*z)``\ ”。从通常的数学定义出发，我们期望按后者进行解析，因为“\ ``*``\ ”（乘法）的优先级要高于“\ ``+``\ ”（加法）。

处理这个问题的方法有很多种，但最优雅高效的方法还是使用\ `算符优先级解析`__\ 。这种解析技术利用二元运算符的优先级来引导递归。首先，我们需要一张优先级表：

.. include:: _includes/chapter-2-code-10.rst

__ http://en.wikipedia.org/wiki/Operator-precedence_parser

就Kaleidoscope的基本形式而言，我们仅需支持4种二元运算符（作为我们英勇无畏的读者，您一定可以轻易对其进行扩展）。函数\ ``GetTokPrecedence``\ 返回当前标记的优先级，若该标记不是二元运算符则返回\ ``-1``\ 。借助\ ``map``\ 可以简化新运算符的添加，同时这种算法也不依赖于任何特定的运算符。不过要想省掉\ ``map``\ 并直接在\ ``GetTokPrecedence``\ 中进行优先级比较也很简单。（直接使用定长数组也行）。

借助上面定义的辅助函数，我们可以开始解析二元表达式了。算符优先级解析的基本思想是对包含可能具备二义性的二元运算符的表达式进行分解。以表达式“\ ``a+b+(c+d)*e*f+g``\ ”为例。算符优先级解析过程将之看作一串由二元运算符分隔的主表达式。如此一来，它首先解析出第一个主表达式“\ ``a``\ ”，然后陆续看到标记对\ ``[+, b]``\ 、\ ``[+, (c+d)]``\ 、\ ``[*, e]``\ 、\ ``[*, f]``\ 和\ ``[+, g]``\ 。注意，由于括号表达式是主表达式之一，处理二元表达式时完全不用担心\ ``(c+d)``\ 这样的嵌套表达式。

首先，表达式由一个主表达式开头，后续可能伴随着一个\ ``[binop, primaryexpr]``\ 序对的列表：

.. include:: _includes/chapter-2-code-11.rst

``ParseBinOpRHS``\ 是为我们解析序对列表的函数。它携带着一个优先级和一个指向当前解析出的表达式的指针。注意“\ ``x``\ ”是一个完全合法的表达式：因此\ ``binoprhs``\ 可以为空，这时函数会将传入的表达式返回。在我们上面的例子中，这段代码会将“\ ``a``\ ”传入\ ``ParseBinOpRHS``\ ，同时当前标记为“\ ``+``\ ”。

传给\ ``ParseBinOpRHS``\ 的优先级代表了该函数所能消化的\ **最小运算符优先级**\ 。例如，若标记流中当前的序对为“\ ``[+, x]``\ ”且传给\ ``ParseBinOpRHS``\ 的优先级为40，则该函数不会再取走任何标记（因为“\ ``+``\ ”的优先级为20）。弄明白了这点，\ ``ParseBinOpRHS``\ 的定义可以像这样开始：

.. include:: _includes/chapter-2-code-12.rst

这段代码查询当前标记的优先级并检查优先级是否过低。由于我们将非二元运算符标记的优先级定义为\ ``-1``\ ，因此该检查在序对流中不再有二元运算符时便会自行结束。如果检查通过，则该标记是一个二元运算符且会被囊括到当前的表达式中：

.. include:: _includes/chapter-2-code-13.rst

解析其余内容
============

驱动代码
========

结论
====

.. _chapter-2-code:

完整源码
========

.. include:: _includes/chapter-2-code-full.rst

.. vim:ft=rst ts=4 sw=4 et wrap
